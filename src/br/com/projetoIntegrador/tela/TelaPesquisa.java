/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.projetoIntegrador.tela;

import br.com.projetoIntegrador.dao.CampeonatoDaoImpl;
import br.com.projetoIntegrador.dao.EquipeDaoImpl;
import br.com.projetoIntegrador.dao.ParticipanteDaoImpl;
import br.com.projetoIntegrador.entidade.Campeonato;
import br.com.projetoIntegrador.entidade.Equipe;
import br.com.projetoIntegrador.entidade.Participante;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author maria
 */
public class TelaPesquisa extends javax.swing.JFrame {

    private List<Campeonato> campeonatos;
    private List<Equipe> equipes;
    private List<Participante> participantes;
    private CampeonatoDaoImpl campeonatoDaoImpl;
    private EquipeDaoImpl equipeDaoImpl;
    private ParticipanteDaoImpl participanteDaoImpl;
    private String nomePesquisado;

    /**
     * Creates new form TelaPesquisa
     */
    public TelaPesquisa() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel = new javax.swing.JPanel();
        lbTituloPrincipal = new javax.swing.JLabel();
        lbPesquisa = new javax.swing.JLabel();
        varPesquisa = new javax.swing.JTextField();
        lbPesquisarEm = new javax.swing.JLabel();
        btPesquisar = new javax.swing.JButton();
        btExcluir = new javax.swing.JButton();
        btVoltaMenu = new javax.swing.JButton();
        jComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtPesquisa = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel.setForeground(new java.awt.Color(249, 249, 249));
        jPanel.setBackground(new java.awt.Color(249, 249, 249));

        lbTituloPrincipal.setFont(new java.awt.Font("Ink Free", 0, 50)); // NOI18N
        lbTituloPrincipal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbTituloPrincipal.setText("Pesquisa");

        lbPesquisa.setFont(new java.awt.Font("Ink Free", 1, 16)); // NOI18N
        lbPesquisa.setForeground(new java.awt.Color(102, 102, 102));
        lbPesquisa.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbPesquisa.setText("Pesquisa:");

        lbPesquisarEm.setFont(new java.awt.Font("Ink Free", 1, 16)); // NOI18N
        lbPesquisarEm.setForeground(new java.awt.Color(102, 102, 102));
        lbPesquisarEm.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbPesquisarEm.setText(" em:");

        btPesquisar.setText("Pesquisar");
        btPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPesquisarActionPerformed(evt);
            }
        });

        btExcluir.setText("Excluir");
        btExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExcluirActionPerformed(evt);
            }
        });

        btVoltaMenu.setText("Voltar ao menu");
        btVoltaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVoltaMenuActionPerformed(evt);
            }
        });

        jComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Campeonatos", "Equipes", "Participantes", "Equipes por campeonato", "Participantes por equipe" }));
        jComboBox.setActionCommand("");

        jScrollPane1.setBackground(new java.awt.Color(249, 249, 249));
        jScrollPane1.setForeground(new java.awt.Color(249, 249, 249));
        jScrollPane1.setOpaque(false);

        jtPesquisa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jtPesquisa.setGridColor(new java.awt.Color(201, 190, 190));
        jtPesquisa.setOpaque(false);
        jtPesquisa.setBackground(new java.awt.Color(249, 249, 249));
        jScrollPane1.setViewportView(jtPesquisa);

        javax.swing.GroupLayout jPanelLayout = new javax.swing.GroupLayout(jPanel);
        jPanel.setLayout(jPanelLayout);
        jPanelLayout.setHorizontalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLayout.createSequentialGroup()
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelLayout.createSequentialGroup()
                        .addGap(298, 298, 298)
                        .addComponent(lbTituloPrincipal))
                    .addGroup(jPanelLayout.createSequentialGroup()
                        .addGap(188, 188, 188)
                        .addComponent(lbPesquisa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(varPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbPesquisarEm)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(55, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btVoltaMenu)
                .addGap(80, 80, 80))
            .addComponent(jScrollPane1)
        );
        jPanelLayout.setVerticalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbTituloPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbPesquisa)
                    .addComponent(varPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPesquisarEm)
                    .addComponent(jComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btPesquisar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btExcluir)
                    .addComponent(btVoltaMenu))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPesquisarActionPerformed

        nomePesquisado = varPesquisa.getText().trim();
        int grupoPesquisado = jComboBox.getSelectedIndex();
        if (grupoPesquisado == 0) {
            try {
                preenchePesquisaCampeonato(nomePesquisado);
            } catch (SQLException ex) {
                System.out.println("Erro ao preencher equipe " + ex.getMessage());
            }
        };
        if (grupoPesquisado == 1) {
            try {
                preenchePesquisaEquipe(nomePesquisado);
            } catch (SQLException ex) {
                System.out.println("Erro ao preencher equipe " + ex.getMessage());
            }
        }
        if (grupoPesquisado == 2) {
            try {
                preenchePesquisaParticipante(nomePesquisado);
            } catch (SQLException ex) {
                System.out.println("Erro ao preencher participante " + ex.getMessage());
            }
        }
        if (grupoPesquisado == 3) {
            try {
                preenchePesquisaEquipesPorCampeonato(nomePesquisado);
            } catch (Exception e) {
                System.out.println("Erro ao preencher equipes por campeonato " + e.getMessage());
            }
        }
        if (grupoPesquisado == 4) {
            try {
                preenchePesquisaParticipantePorEquipe(nomePesquisado);
            } catch (Exception e) {
                System.out.println("Erro ao preencher equipes por campeonato " + e.getMessage());

            }
        }
        // numeros não são amigaveis, mas deixei assim, preferia o if(grupoPesquisado.equals("Equipes por campeonato"))- maria 

    }//GEN-LAST:event_btPesquisarActionPerformed

    private void btExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExcluirActionPerformed
        nomePesquisado = varPesquisa.getText().trim();
        String grupoPesquisado = String.valueOf(jComboBox.getSelectedItem());

        int index = jtPesquisa.getSelectedRow();
        if (index >= 0) {
            try {

                if (grupoPesquisado.equals("Campeonatos")) {
                    int id = campeonatos.get(index).getId();
                    excluiCampeonato(id);
                    campeonatos.remove(index);
                    preenchePesquisaCampeonato(nomePesquisado);
                }
                if (grupoPesquisado.equals("Equipes")) {
                    int id = equipes.get(index).getId();
                    excluirEquipe(id);
                    equipes.remove(index);
                    preenchePesquisaEquipe(nomePesquisado);
                }
                if (grupoPesquisado.equals("Participantes")) {

                    int id = participantes.get(index).getId();
                    excluirParticipante(id);
                    participantes.remove(index);
                    preenchePesquisaParticipante(nomePesquisado);
                }
                if (grupoPesquisado.equals("Equipes por campeonato")) {
                    int id = equipes.get(index).getId();
                    excluirEquipe(id);
                    equipes.remove(index);
                    preenchePesquisaEquipesPorCampeonato(nomePesquisado);
                }
                if (grupoPesquisado.equals("Participantes por equipe")) {
                    int id = participantes.get(index).getId();
                    excluirParticipante(id);
                    participantes.remove(index);
                    preenchePesquisaParticipantePorEquipe(nomePesquisado);
                }
            } catch (SQLException ex) {
                System.out.println("Erro ao excluir " + ex.getMessage());
            }
        } else {
            System.out.println("Nenhuma linha selecionada.");
        }


    }//GEN-LAST:event_btExcluirActionPerformed

    private void btVoltaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVoltaMenuActionPerformed
        new TelaPrincipal().setVisible(true);
        dispose();
    }//GEN-LAST:event_btVoltaMenuActionPerformed

    //Metodos que preenchem a tabela de acordo com o grupo escolhido na common box 
    public void preenchePesquisaCampeonato(String nomePesquisado) throws SQLException {

        campeonatoDaoImpl = new CampeonatoDaoImpl();
        campeonatos = campeonatoDaoImpl.pesquisarCampeonatoPorNome(nomePesquisado);//retorna todos os campeonatos que tenho

        String[] coluna = new String[]{"Campeonato", "Data", "Logradouro", "Bairro", "Cidade", "Estado", "Cep", "Complemento"};
        ArrayList dados = new ArrayList();
        for (Campeonato campeonato : campeonatos) {

            dados.add(new Object[]{
                campeonato.getNomeCampeonato(),
                campeonato.getDataCampeonato(),
                campeonato.getEndereco().getLogradouro(),
                campeonato.getEndereco().getBairro(),
                campeonato.getEndereco().getCidade(),
                campeonato.getEndereco().getEstado(),
                campeonato.getEndereco().getCep(),
                campeonato.getEndereco().getComplemento()
            });

        }
        ModeloTabela modelo = new ModeloTabela(dados, coluna);
        jtPesquisa.setModel(modelo);

    }

    public void preenchePesquisaEquipe(String nomePesquisado) throws SQLException {
        EquipeDaoImpl equip = new EquipeDaoImpl();
        equipes = equip.pesquisarEquipePorNomeEquipe(nomePesquisado);

        String[] coluna = new String[]{"Equipe", "Campeonato", "Data"};
        ArrayList dados = new ArrayList();

        for (Equipe equipe : equipes) {

            dados.add(new Object[]{
                equipe.getNome(),
                equipe.getCampeonato().getNomeCampeonato(),
                equipe.getCampeonato().getDataCampeonato()
            });
        }
        ModeloTabela modelo = new ModeloTabela(dados, coluna);
        jtPesquisa.setModel(modelo);
    }

    public void preenchePesquisaParticipante(String nomePesquisado) throws SQLException {
        participanteDaoImpl = new ParticipanteDaoImpl();
        participantes = participanteDaoImpl.pesquisarParticipantesPorNome(nomePesquisado);

        String[] coluna = new String[]{"Nome", "CPF", "Telefone", "Equipe", "Logradouro", "Bairro", "Cidade", "Estado", "Cep", "Complemento"};
        ArrayList dados = new ArrayList();

        for (Participante participante : participantes) {
            dados.add(new Object[]{
                participante.getNome(),
                participante.getCpf(),
                participante.getTelefone(),
                participante.getEquipe().getNome(),
                participante.getEndereco().getLogradouro(),
                participante.getEndereco().getBairro(),
                participante.getEndereco().getCidade(),
                participante.getEndereco().getEstado(),
                participante.getEndereco().getCep(),
                participante.getEndereco().getComplemento()
            }
            );
        }
        ModeloTabela modelo = new ModeloTabela(dados, coluna);
        jtPesquisa.setModel(modelo);

    }

    public void preenchePesquisaEquipesPorCampeonato(String nomeCampeonato) throws SQLException {

        campeonatoDaoImpl = new CampeonatoDaoImpl();
        campeonatos = campeonatoDaoImpl.pesquisarCampeonatoPorNome(nomeCampeonato);
        if (campeonatos.size() == 1) {
            for (Campeonato campeonato : campeonatos) {
                int idCampeonato = campeonato.getId();
                equipeDaoImpl = new EquipeDaoImpl();
                equipes = equipeDaoImpl.pesquisarEquipesPorIdCampeonato(idCampeonato);

                String[] coluna = new String[]{"Equipe", "Campeonato", "Data"};
                ArrayList dados = new ArrayList();

                for (Equipe equipe : equipes) {

                    dados.add(new Object[]{
                        equipe.getNome(),
                        equipe.getCampeonato().getNomeCampeonato(),
                        equipe.getCampeonato().getDataCampeonato()
                    });
                }
                ModeloTabela modelo = new ModeloTabela(dados, coluna);
                jtPesquisa.setModel(modelo);

            }
        } else {
            JOptionPane.showMessageDialog(null, "Nome campeonato corresponde a muitos itens, por favor especifique mais a pesquisa.");
        }

    }

    public void preenchePesquisaParticipantePorEquipe(String nomeEquipe) throws SQLException {
        equipeDaoImpl = new EquipeDaoImpl();
        equipes = equipeDaoImpl.pesquisarEquipePorNomeEquipe(nomeEquipe);
        if (equipes.size() == 1) {
            for (Equipe equipe : equipes) {
                int idEquipe = equipe.getId();
                participanteDaoImpl = new ParticipanteDaoImpl();
                participantes = participanteDaoImpl.pesquisarParticipantesPorEquipe(idEquipe);

                String[] coluna = new String[]{"Nome", "CPF", "Telefone", "Equipe", "Logradouro", "Bairro", "Cidade", "Estado", "Cep", "Complemento"};
                ArrayList dados = new ArrayList();

                for (Participante participante : participantes) {
                    dados.add(new Object[]{
                        participante.getNome(),
                        participante.getCpf(),
                        participante.getTelefone(),
                        participante.getEquipe().getNome(),
                        participante.getEndereco().getLogradouro(),
                        participante.getEndereco().getBairro(),
                        participante.getEndereco().getCidade(),
                        participante.getEndereco().getEstado(),
                        participante.getEndereco().getCep(),
                        participante.getEndereco().getComplemento()
                    }
                    );
                }
                ModeloTabela modelo = new ModeloTabela(dados, coluna);
                jtPesquisa.setModel(modelo);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Nome equipe corresponde a muitos itens, por favor especifique mais a pesquisa.");
        }

    }

    //Metodos que apagam o objeto selecionado no banco chamando classes DaoImpl
    public void excluiCampeonato(int id) {
        EquipeDaoImpl equip = new EquipeDaoImpl();
        equipes = equip.pesquisarEquipesPorIdCampeonato(id);
        if (equipes.size() <= 0) {
            campeonatoDaoImpl.excluir(id);
        } else {
            int resultadoDojop = JOptionPane.showConfirmDialog(null, "O campeonato selecionado possue equipes cadastradas, ao deleta-lo todas as equipes serão apagadas. Apagar campeonato e equipes?");

            if (resultadoDojop == 0) {
                campeonatoDaoImpl = new CampeonatoDaoImpl();
                campeonatoDaoImpl.excluir(id);
            }
        }
    }

    public void excluirEquipe(int id) throws SQLException {
        ParticipanteDaoImpl particip = new ParticipanteDaoImpl();
        participantes = particip.pesquisarParticipantesPorEquipe(id);
        if (participantes.size() <= 0) {
            equipeDaoImpl.excluir(id);
        } else {
            int resultadoDojop = JOptionPane.showConfirmDialog(null, "A equipe selecionada possue participantes cadastrados, ao deleta-la todas os participantes serão apagadas. Apagar equipe e participantes?");

            if (resultadoDojop == 0) {
                equipeDaoImpl = new EquipeDaoImpl();
                equipeDaoImpl.excluir(id);
            }
        }
    }

    public void excluirParticipante(int id) {
        participanteDaoImpl = new ParticipanteDaoImpl();
        participanteDaoImpl.excluir(id);
    }

    //Desing da interface grafica
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaPesquisa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaPesquisa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaPesquisa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaPesquisa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaPesquisa().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btExcluir;
    private javax.swing.JButton btPesquisar;
    private javax.swing.JButton btVoltaMenu;
    private javax.swing.JComboBox<String> jComboBox;
    private javax.swing.JPanel jPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtPesquisa;
    private javax.swing.JLabel lbPesquisa;
    private javax.swing.JLabel lbPesquisarEm;
    private javax.swing.JLabel lbTituloPrincipal;
    private javax.swing.JTextField varPesquisa;
    // End of variables declaration//GEN-END:variables
}
